#!/usr/bin/env ruby

require 'cgi'
require 'date'
require 'json'
require 'net/http'
require 'open3'
require 'optparse'
require 'uri'

# Options
ARGV.push('--help') unless ARGV.include?('run')

options = {}
OptionParser.new do |parser|
  parser.banner = <<~BANNER
    Add to the Wayback Machine links saved to a pinboard account.

    Usage:
      #{File.basename($PROGRAM_NAME)} [options] run

    The argument 'run' is necessary to prevent running the script by mistake.

    'token' options are compatible between pinboard-backup, pinboard-delete-unread, pinboard-link-check, pinboard-url-update, pinboard-waybackmachine

    Options:
  BANNER

  parser.on(
    '-t <token>', '--token',
    'Your Pinboard API token.'
  )

  parser.on(
    '-a', '--ask-for-token',
    'Ask for your Pinboard API token on start.'
  )

  parser.on(
    '-s', '--save-token',
    'Save Pinboard API token to Keychain and exit (macOS-only). Use with "--token" or "--ask-for-token".'
  )
end.parse!(into: options)

# Deal with token options
Pinboard_token = lambda {
  return options[:token] if options[:token]

  if options[:'ask-for-token']
    puts <<~TOKEN_MESSAGE
      Please insert your api token (will not be echoed)
      You can get it at https://pinboard.in/settings/password
    TOKEN_MESSAGE
    print '> '

    return gets.chomp
  end

  Open3.capture2('security', 'find-generic-password', '-s', 'Pinboard API Token', '-w').first.strip
}.call

abort 'Cannot continue without a Pinboard token.' if Pinboard_token.empty?
abort 'The Pinboard API token appears to be incorrect. Alternatively, Pinboard’s servers might be down.' if Net::HTTP.get(URI.parse("https://api.pinboard.in/v1/user/api_token/?auth_token=#{Pinboard_token}")).nil?

system('security', 'add-generic-password', '-a', Pinboard_token.split(':').first, '-s', 'Pinboard API Token', '-w', Pinboard_token) if options[:'save-token']

# Main
All_links = JSON.parse(Net::HTTP.get(URI.parse(
  "https://api.pinboard.in/v1/posts/all?auth_token=#{Pinboard_token}&format=json"
))).reject { _1['toread'] == 'yes' }.map { _1['href'] }

Bookmarks_count = All_links.count

All_links.each_with_index { |link, index|
  snapshots = JSON.parse(Net::HTTP.get(URI.parse(
    "https://archive.org/wayback/available?url=#{CGI.escape(link)}"
  )))['archived_snapshots']

  # Wait a second to avoid rate limiting
  sleep(1)

  # Only save links never backed up or last backed up over 180 days (6 months) ago
  if snapshots.empty? || (Date.today - Date.parse(snapshots['closest']['timestamp'])).to_i > 180
    puts "[Saving…] #{link}"
    Net::HTTP.get(URI.parse("https://web.archive.org/save/#{link}"))
    next
  end

  puts "[#{Bookmarks_count - index}] #{link}"
}
