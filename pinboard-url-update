#!/usr/bin/env ruby

require 'cgi'
require 'json'
require 'net/http'
require 'open3'
require 'optparse'

def fail_message(url, message)
  warn "\e[31m•\e[0m #{url}"
  warn "⮑  #{message}"
end

def success_message(message)
  puts "\e[32m•\e[0m #{message}"
end

# Options
ARGV.push('--help') if ARGV.empty?

options = {}
OptionParser.new do |parser|
  parser.banner = <<~BANNER
    Substitute URLs of Pinboard bookmarks. Interacts with the files produced by "pinboardlinkcheck": text file, each line following the pattern 'old_url → new_url'.

    Usage:
      #{File.basename($PROGRAM_NAME)} [options] <file>

    'token' options are compatible between pinboard-backup, pinboard-delete-unread, pinboard-link-check, pinboard-url-update, pinboard-waybackmachine

    Options:
  BANNER

  parser.on(
    '-t <token>', '--token',
    'Your Pinboard API token.'
  )

  parser.on(
    '-a', '--ask-for-token',
    'Ask for your Pinboard API token on start.'
  )

  parser.on(
    '-s', '--save-token',
    'Save Pinboard API token to Keychain and exit (macOS-only). Use with "--token" or "--ask-for-token".'
  )
end.parse!(into: options)

# Deal with token options
Pinboard_token = lambda {
  return options[:token] if options[:token]

  if options[:'ask-for-token']
    puts <<~TOKEN_MESSAGE
      Please insert your api token (will not be echoed)
      You can get it at https://pinboard.in/settings/password
    TOKEN_MESSAGE
    print '> '

    return gets.chomp
  end

  Open3.capture2('security', 'find-generic-password', '-s', 'Pinboard API Token', '-w').first.strip
}.call

abort 'Cannot continue without a Pinboard token.' if Pinboard_token.empty?
abort 'The Pinboard API token appears to be incorrect. Alternatively, Pinboard’s servers might be down.' if Net::HTTP.get(URI.parse("https://api.pinboard.in/v1/user/api_token/?auth_token=#{Pinboard_token}")).nil?

system('security', 'add-generic-password', '-a', Pinboard_token.split(':').first, '-s', 'Pinboard API Token', '-w', Pinboard_token) if options[:'save-token']

# Load file
Links_file = ARGV[0]
abort 'You need to provide the path to a file.' if !File.file?(Links_file)

# Update bookmarks
All_bookmarks = JSON.parse(Net::HTTP.get(URI.parse(
  "https://api.pinboard.in/v1/posts/all?auth_token=#{Pinboard_token}&format=json"
)))

File.readlines(Links_file).each do |line|
  urls = line.split('→').map(&:strip)
  old_url = urls[0]
  new_url = urls[1]

  if urls.length != 2
    puts 'Line is malformed. Skipping…'
    next
  end

  bhash = All_bookmarks.detect { |hash| hash['href'] == old_url }

  if bhash.nil?
    fail_message(old_url, 'Did not find URL in account.')
    next
  end

  bhash['href'] = new_url
  bhash.transform_values! { |v| CGI.escape(v) }

  add_bookmark_result = JSON.parse(Net::HTTP.get(URI.parse("https://api.pinboard.in/v1/posts/add?url=#{bhash['href']}&description=#{bhash['description']}&extended=#{bhash['extended']}&tags=#{bhash['tags']}&dt=#{bhash['time']}&shared=#{bhash['shared']}&toread=#{bhash['toread']}&auth_token=#{Pinboard_token}&format=json")))['result_code']
  if add_bookmark_result != 'done'
    fail_message("(Adding) #{new_url}", result)
    next
  end

  del_bookmark_result = JSON.parse(Net::HTTP.get(URI.parse("https://api.pinboard.in/v1/posts/delete?url=#{CGI.escape(old_url)}&auth_token=#{Pinboard_token}&format=json")))['result_code']

  if del_bookmark_result != 'done'
    fail_message("(Removing) #{old_url}", result)
    next
  end

  success_message(line)
end
