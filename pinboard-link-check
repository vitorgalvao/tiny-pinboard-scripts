#!/bin/bash

readonly program="$(basename "${0}")"

# Instructions
function usage {
  echo "
    Check the status code of links saved to a pinboard account.

    By default, unread bookmarks and bookmarks with a 'pinboard-link-check-ignore' tag are ignored.

    Usage:
      ${program} [options]

    'token' options are compatible between pinboard-backup, pinboard-delete-unread, pinboard-link-check, pinboard-url-update, pinboard-waybackmachine

    Options:
      -r, --redirect-log      If set, links with 301 (Moved permanently) will be on their own log. Pairs well with the 'pinboard-url-update' script.
      -l, --log-dir <dir>     Directory to save logs to. Defaults to the home directory.
      -i, --include-unread    Also check unread bookmarks.
      -g, --include-ignored   Do not ignore links with a 'pinboard-link-check-ignore' tag
      -t, --token <token>     Your Pinboard API token.
      -a, --ask-for-token     Ask for your Pinboard API token on start.
      -s, --save-token        Save Pinboard API token to Keychain and exit. Use with '--token' or '--ask-for-token' (macOS-only).
      -h, --help              Show this message.
  " | sed -E 's/^ {4}//'
}

# Set color for verbose messages
function bad { echo "$(tput setab 1)$(tput setaf 7)${1}$(tput sgr0) ${2}" ;}
function good { echo "$(tput setab 2)$(tput setaf 7)${1}$(tput sgr0) ${2}" ;}
function warning { echo "$(tput setab 3)$(tput setaf 7)${1}$(tput sgr0) ${2}" ;}

# Options
args=()
while [[ "${1}" ]]; do
  case "${1}" in
    -h | --help)
      usage
      exit 0
      ;;
    -r | --redirect-log)
      readonly redirect_log='true'
      ;;
    -l | --log-dir)
      readonly log_dir="${2}"
      shift
      ;;
    -i | --include-unread)
      readonly keep_unread='true'
      ;;
    -g | --include-ignored)
      readonly do_not_ignore="${2}"
      shift
      ;;
    -t | --token)
      readonly token="${2}"
      shift
      ;;
    -a | --ask-for-token)
      readonly ask_for_token='true'
      ;;
    -s | --save-token)
      readonly set_keychain_token='true'
      ;;
    --)
      shift
      args+=("${@}")
      break
      ;;
    -*)
      echo "Unrecognised option: ${1}"
      exit 1
      ;;
    *)
      args+=("${1}")
      ;;
  esac
  shift
done
set -- "${args[@]}"

# Location for log files
[[ -z "${log_dir}" ]] && readonly log_dir="${HOME}"
readonly log_file="${log_dir}/pinboardlinkcheck.log"
[[ -n "${redirect_log}" ]] && readonly redirect_log_file="${log_dir}/pinboardlinkcheck-redirects.log"

# Ask for api token, if option is set
if [[ -n "${ask_for_token}" ]]; then
  echo 'Please insert your api token (will not be echoed)'
  echo 'You can get it at https://pinboard.in/settings/password'
  read -rsp '> ' token
  echo
fi

# If no token given, look for it in the Keychain
[[ -z "${token}" ]] && readonly token="$(security find-generic-password -s 'Pinboard API Token' -w)"

# Exit if no token was set
if [[ -z "${token}" ]]; then
  echo 'Cannot continue without a Pinboard token.'
  usage
  exit 1
fi

# Check if token is correct
if ! curl --fail --silent "https://api.pinboard.in/v1/user/api_token/?auth_token=${token}" > /dev/null; then
  echo "The Pinboard API token appears to be incorrect. Alternatively, Pinboard’s servers might be down." >&2
  exit 1
fi

# Save token to Keychain
if [[ -n "${set_keychain_token}" ]]; then
  security add-generic-password -a "${token%:*}" -s 'Pinboard API Token' -w "${token}"
  exit 0
fi

# Get all your pinboard links
readonly links="$(
  all="$(curl --silent "https://api.pinboard.in/v1/posts/all?auth_token=${token}" | grep '^<post')"

  after_ignores="$(
    if [[ "${do_not_ignore}" ]]; then
      echo "${all}"
      return
    fi

    grep --extended-regexp --invert-match 'tag=".*?pinboard-link-check-ignore.*?"' <<< "${all}"
  )"

  after_unread="$(
    if [[ "${keep_unread}" ]]; then
      echo "${after_ignores}"
      return
    fi

    grep --invert-match 'toread="yes"' <<< "${after_ignores}"
  )"

  # Final output
  cut -d '"' -f 2 <<< "${after_unread}" | sed '1d' | perl -MHTML::Entities -ne 'print decode_entities($_)'
)"

link_countdown="$(wc -l <<< "${links}" | tr -d ' ')"

# Check each link individually
for page in ${links} ; do
  echo -n "[${link_countdown}] "
  ((link_countdown--))

  status="$(curl --silent --write-out '%{http_code}' --output /dev/null "${page}")"

  if [[ "${status:0:1}" == '2' ]]; then
    good "${status}" "${page}"
  elif [[ "${status:0:1}" == '3' ]]; then
    warning "${status}" "${page}"
  else
    bad "${status}" "${page}"
  fi

  # Append to log file
  echo "${status} ${page}" >> "${log_file}"
done

# Cleanup
# Remove every link with a '200' code from the log
sed -i '' '/^200/d' "${log_file}"

# Order links by status code
readonly ordered_links=$(sort "${log_file}")
echo "${ordered_links}" > "${log_file}"

# Move 301 links to redirect log, if specified
if [[ -n "${redirect_log}" ]]; then
  readonly redirect_links="$(grep '^301' "${log_file}" | sed 's/^301 //')"

  for page in ${redirect_links}; do
    redirect_url="$(curl --silent --write-out '%{redirect_url}' --output /dev/null "${page}")"
    echo "${page} → ${redirect_url}" | tee -a "${redirect_log_file}"
  done

  # Remove 301s from the main log
  sed -i '' '/^301/d' "${log_file}"
fi
